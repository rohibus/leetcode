public class Solution {
    int[] nums;
    long mod = (int)1E9 + 7;
    public int NumSubseq(int[] nums, int target) 
    {
        this.nums = nums;
        Array.Sort(nums);
        long count = 0;
        
        
        for (int i = 0; i < nums.Length; i++)
        {
            if (nums[i] < target)
            {
                int index = BinarySearch(i, target-nums[i]);
                
                if (index >= i)
                {
                    count  += power(2, index-i)%mod;
                    count %= mod;
                }
            }
            else
                break;
        }
        
        return (int)count;
    }
    
    public int BinarySearch(int i, int key)
    {
        int start = i;
        int end = nums.Length-1;
        int index = -1;
        
        while (start <= end)
        {
            int mid = start + (end-start)/2;
            if (nums[mid] <= key)
            {
                index = mid;
                start = mid+1;
            }
            else
            {
                end = mid-1;
            }
        }
        
        return index;
    }
    
    public long power(long x, long y)
    {
        long result = 1;
        while (y > 0) 
        {
            if ((y&1) == 1)
            {
                result *= x;
                result %= mod;
            }
                
            x *= x;
            x %= mod;
            y /= 2;
            
        }
        return result%mod;
    }
}