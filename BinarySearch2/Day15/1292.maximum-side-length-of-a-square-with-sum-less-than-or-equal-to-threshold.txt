public class Solution {
    public int MaxSideLength(int[][] mat, int threshold) 
    {
        int row = mat.Length;
        int col = mat[0].Length;
        
        int[,] sum = new int[row+1, col+1];
        
        for (int i = 1; i <= row; i++)
        {
            for (int j = 1; j <= col; j++)
            {
                sum[i, j] = sum[i-1, j] + sum[i, j-1] + mat[i-1][j-1] - sum[i-1, j-1];
            }
        }
        
        for (int i = 1; i <= row; i++)
        {
            for (int j = 1; j <= col; j++)
            {
                Console.Write(sum[i,j] + "  ");
            }
            Console.WriteLine();
        }
        
        int start = 0;
        int end = Math.Max(row, col);
        
        while (start < end)
        {
            int mid = start + (end-start+1)/2;
            
            if (IsValidSolution(sum, threshold, mid))
            {
                start = mid;
            }
            else
                end = mid-1;
        }
        return start;
    }
    
    public bool IsValidSolution(int[,] sum, int threshold, int mid)
    {
        int row = sum.GetLength(0);
        int col = sum.GetLength(1);
        
        for (int i = mid; i < row; i++)
        {
            for (int j = mid; j < col; j++)
            {
                if (sum[i, j] - sum[i-mid, j] - sum[i, j-mid] + sum[i-mid, j-mid] <= threshold)
                    return true;
            }
        }
        
        return false;
    }
}