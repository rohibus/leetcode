public class Solution {
    
    public class Pairs
    {
        public int start;
        public int position;
        
        public Pairs(int i, int j)
        {
            start = i;
            position = j;
        }
    }
    
    int n;
    Pairs[] p;
    public int[] FindRightInterval(int[][] intervals) 
    {
        n = intervals.Length;
        int[] res = new int[n];
        p = new Pairs[n];
        
        for (int i = 0; i < n; i++)
        {
            int start = intervals[i][0];
            int position = i;
            p[i] = new Pairs(start, position);
        }
        
        Array.Sort(p, (x, y) => x.start - y.start);
        
        for (int i = 0; i < n; i++)
        {
            int index = BinarySearch(intervals[i][1]);
            
            if (index == -1)
                res[i] = -1;
            else
                res[i] = p[index].position;
        }
        
        return res;
    }
    
    public int BinarySearch(int key)
    {
        int index = -1;
        int left = 0;
        int right = n-1;
        
        while (left <= right)
        {
            int mid = left + (right - left)/2;
            
            if (p[mid].start >= key)
            {
                index = mid;
                right = mid-1;
            }
            else
            {
                left = mid+1;
            }
        }
        
        return index;
    }
}